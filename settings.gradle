include 'tests'

//  TODO: Can this file be specified as a parameter?
file('./docker-local.gradle').with() {
    if (it.exists()) {
        apply from: it
    }
}

if (!gradle.ext.has('architectures')) gradle.ext.architectures = [ default: [:] ]

gradle.ext.dockerBuildProjects =
[
    ':core:nodejsActionBase': [
        'dockerImageName': 'nodejsactionbase'
    ],
    ':core:nodejs6Action': [
        'dockerImageName': 'nodejs6action'
    ],
    ':core:nodejs8Action': [
        'dockerImageName': 'action-nodejs-v8'
    ]
]

gradle.dockerBuildProjects.each() { baseProjectName, extensions ->
    include baseProjectName
    def baseProject = findProject(baseProjectName)

    gradle.architectures.each() { architectureName, architectureClosure ->
        def architectureProjectName = "${baseProjectName}:${architectureName}"
        include architectureProjectName
        def architectureProject = findProject(architectureProjectName)

        logger.debug 'Setup baseProject: ' + baseProject?.path
        logger.debug 'Setup architectureProject: ' + architectureProject?.path

        architectureProject.projectDir = baseProject.projectDir
    }
}

rootProject.name = 'runtime-nodejs'

gradle.ext.openwhisk = [
        version: '1.0.0-SNAPSHOT'
]

gradle.ext.scala = [
    version: '2.11.11',
    compileFlags: ['-feature', '-unchecked', '-deprecation', '-Xfatal-warnings', '-Ywarn-unused-import']
]

gradle.ext.scalafmt = [
    version: '1.5.0',
    config: new File(rootProject.projectDir, '.scalafmt.conf')
]
